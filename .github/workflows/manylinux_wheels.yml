name: Manylinux wheels

on:
  push:
  pull_request:
  create:
  schedule:
    - cron:  '23 1 * * *'

env:
  KIVY_SPLIT_EXAMPLES: 1
  SERVER_IP: '159.203.106.198'
  DOCKER_IMAGE: 'quay.io/pypa/manylinux2010_x86_64'

jobs:
  kivy_examples_create:
    # we need examples wheel for tests, but only windows actually uploads kivy-examples to pypi/server
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          source .ci/ubuntu_ci.sh
          install_kivy_test_wheel_run_pip_deps
      - name: Create wheel
        run: |
          source .ci/ubuntu_ci.sh
          create_kivy_examples_wheel
      - name: Upload kivy-examples wheel as artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux_examples_wheel
          path: dist

  manylinux_wheel_create:
    runs-on: ubuntu-18.04
    if: github.event_name == 'schedule' || (github.event_name == 'create' && github.event.ref_type == 'tag') || contains(github.event.head_commit.message, '[build wheel]') || contains(github.event.head_commit.message, '[build wheel linux]') || contains(github.event.pull_request.title, '[build wheel]') || contains(github.event.pull_request.title, '[build wheel linux]')
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - name: Generate version metadata
      run: |
        source .ci/ubuntu_ci.sh
        update_version_metadata
    - name: Make wheels
      run: |
        source .ci/ubuntu_ci.sh
        generate_manylinux2010_wheels $DOCKER_IMAGE
    - name: Upload wheels as artifact
      uses: actions/upload-artifact@v2
      with:
        name: manylinux_wheels
        path: dist

  manylinux_aarch64_wheel_create:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      img: quay.io/pypa/manylinux2014_aarch64
      py: /opt/python/cp37-cp37m/bin/python
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU        
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Build Wheels
      run: |
            docker run --rm -v ${{ github.workspace }}:/io:rw --workdir=/io \
            ${{ env.img }} \
            bash -exc '${{ env.py }} -m venv .env && \
            source .env/bin/activate && \
            yum -y install sudo && \
            source .ci/ubuntu_ci.sh update_version_metadata && \
            mkdir dist && \
            chmod +x .ci/build-wheels-linux.sh && \
            source .ci/build-wheels-linux.sh && \
            sudo rm dist/*-linux*
            deactivate'
    - name: Upload wheels as artifact
      uses: actions/upload-artifact@v2
      with:
        name: manylinux_wheels
        path: dist            
  manylinux_wheel_upload:
    runs-on: ubuntu-18.04
    needs: [manylinux_wheel_create, kivy_examples_create, manylinux_aarch64_wheel_create]
    if: github.event_name != 'pull_request'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - uses: actions/download-artifact@v2
      with:
        name: manylinux_wheels
        path: dist
    - name: Rename wheels
      if: github.event.ref_type != 'tag'
      run: |
        source .ci/ubuntu_ci.sh
        rename_wheels
    - name: Upload wheels to server
      env:
        UBUNTU_UPLOAD_KEY: ${{ secrets.UBUNTU_UPLOAD_KEY }}
      run: |
        source .ci/ubuntu_ci.sh
        upload_file_to_server "$SERVER_IP" "linux/kivy/"
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@78c309ef59fdb9557cd6574f2e0be552936ed728
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.github_release }}
      with:
        files: dist/*
        draft: true
    - name: Publish to PyPI
      if: github.event_name == 'create' && github.event.ref_type == 'tag'
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: |
        source .ci/ubuntu_ci.sh
        upload_artifacts_to_pypi
  manylinux_wheel_test:
    runs-on: ubuntu-18.04
    needs: [manylinux_wheel_create, kivy_examples_create]
    strategy:
      matrix:
        python: [ '3.6', '3.7', '3.8', '3.9' ]
    env:
      DISPLAY: ':99.0'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - uses: actions/download-artifact@v2
      with:
        name: manylinux_wheels
        path: dist
    - name: Install dependencies
      run: |
        source .ci/ubuntu_ci.sh
        install_kivy_test_run_apt_deps
        install_kivy_test_wheel_run_pip_deps
    - name: Setup env
      run: |
        source .ci/ubuntu_ci.sh
        prepare_env_for_unittest
    - name: Install Kivy
      run: |
        source .ci/ubuntu_ci.sh
        install_kivy_wheel
    - uses: actions/download-artifact@v2
      with:
        name: linux_examples_wheel
        path: dist
    - name: Install kivy-examples wheel
      run: |
        source .ci/ubuntu_ci.sh
        install_kivy_examples_wheel
    - name: Test Kivy
      run: |
        source .ci/ubuntu_ci.sh
        test_kivy_install
    - name: Test Kivy benchmarks
      if: matrix.python == '3.9' && (github.event_name == 'schedule' || (github.event_name == 'create' && github.event.ref_type == 'tag'))
      run: |
        source .ci/ubuntu_ci.sh
        test_kivy_benchmark
    - name: Upload benchamrks as artifact
      uses: actions/upload-artifact@v2
      with:
        name: benchmarks
        path: .benchmarks-kivy

  manylinux_aarch64_wheel_test:
    needs: [manylinux_aarch64_wheel_create]
    strategy:
      matrix:
        pyver: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]    
      fail-fast: false
    runs-on: ubuntu-18.04
    env:
      img: quay.io/pypa/manylinux2014_aarch64
      py: opt/python/${{ matrix.pyver }}/bin/python
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU        
      id: qemu
      uses: docker/setup-qemu-action@v1
    - uses: actions/download-artifact@v2
      with:
        name: manylinux_wheels
        path: dist      
    - name: Test Wheels
      run: |
            docker run --rm -v ${{ github.workspace }}:/io:rw --workdir=/io \
            ${{ env.img }} \
            bash -exc 'source .env/bin/activate && \
            source .ci/ubuntu_ci.sh install_kivy_test_run_apt_deps install_kivy_test_wheel_run_pip_deps && \
            source .ci/ubuntu_ci.sh prepare_env_for_unittest && \
            source .ci/ubuntu_ci.sh install_kivy_wheel && \
            source .ci/ubuntu_ci.sh test_kivy_install && \
            deactivate'
            #${{ env.py }} -m venv .env && \            
  sdist_test:
    runs-on: ubuntu-18.04
    env:
      DISPLAY: ':99.0'
      KIVY_SPLIT_EXAMPLES: 0
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Generate sdist
        run: |
          source .ci/ubuntu_ci.sh
          generate_sdist
      - name: Install dependencies
        run: |
          source .ci/ubuntu_ci.sh
          install_kivy_test_run_apt_deps
          install_kivy_test_wheel_run_pip_deps
      - name: Setup env
        run: |
          source .ci/ubuntu_ci.sh
          prepare_env_for_unittest
      - name: Install Kivy
        run: |
          source .ci/ubuntu_ci.sh
          install_kivy_sdist
      - name: Test Kivy
        run: |
          source .ci/ubuntu_ci.sh
          test_kivy_install
